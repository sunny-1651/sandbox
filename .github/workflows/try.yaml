name: Dynamic Matrix Example

on: [push]

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract regions from JSON
        id: set-regions
        run: |
          # Extract regions from input.json and format as a JSON array
          regions=$(jq -r '.regions | @csv' user_input.json | tr -d '"' | tr -d ' ')
          echo "REGIONS=[${regions}]" >> $GITHUB_ENV
          cat $GITHUB_ENV
          echo "::set-output name=regions::[$regions]"

  deploy:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    # strategy:
    #   matrix:
    #     region: "${{ env.REGIONS }}"
        # region: ["nane1","nane2","nane3","usce2"]
    steps:
      - name: Deploy to AWS
        run: |
          echo "Deploying to region: ${{ env.REGIONS }}" #${{ matrix.region }}"
          # Add your deployment commands here







# on:
#   push:
#     branches:
#       - '*'

#   workflow_dispatch:


# jobs:
#   job1:
#     name: test
#     runs-on: ubuntu-latest
#     outputs:
#       regions: ${{ steps.extract.outputs.regions }}
#     steps:
#     - name: checkout repo
#       uses: actions/checkout@main
#     - name: extract
#       shell: bash
#       run: |
#         # regions=$(jq -r ".locations" user_input.json)
#         # json=$(jq --arg str "$regions" '.locations = ($str | split(","))' user_input.json) #> temp.json
#         # echo $json
#         # echo "regions=$json" >> $GITHUB_OUTPUT
#         # mv temp.json user_input.json
#         # regions=$(jq -r ".locations" user_input.json)
#         # # Convert string to array in JSON and store the result
#         # json=$(jq --arg str "$regions" '.locations = ($str | split(","))' user_input.json)

#         # # Extract just the locations array from the JSON and format it for GITHUB_OUTPUT
#         # # This will properly escape the JSON array for GitHub Actions
#         # locations_array=$(echo "$json" | jq -r '.locations | join(",")')
#         # echo "regions=$locations_array"
#         # echo "regions=$locations_array" >> $GITHUB_OUTPUT
#         matrix=$(jq '.locations | split(",")' user_input.json | jq -c .)
#         echo "regions=$matrix"
#         echo "regions=$matrix" >> $GITHUB_ENV
#         echo "op: $GITHUB_OUTPUT"
#         # echo "env: $GITHUB_ENV"
#         # ls /home/runner/work/_temp/_runner_file_commands -al
#         cat $GITHUB_OUTPUT
#         echo "---------------------------------------------"
#         cat $GITHUB_ENV
  
#   test:
#     name: test
#     runs-on: ubuntu-latest
#     needs: [job1]
#     steps:
#     - name: s1
#       run: echo "${{ env.regions }}"

#   # job2:
#   #   name: job2
#   #   runs-on: ubuntu-latest
#   #   needs: [job1]
#   #   strategy:
#   #     matrix:
#   #       region: ${{ fromJson(needs.job1.outputs.regions).regions }} 
#   #   steps:
#   #   - name: s1
#   #     run: echo "${{ matrix.region }}"

#     # - name: Generate token
#     #   id: generate_token
#     #   uses: tibdex/github-app-token@v1
#     #   with:
#     #     app_id: ${{ secrets.APP_ID }}
#     #     private_key: ${{ secrets.APP_PRIVATE_KEY }}

#     # - name: Wait for approval
#     #   uses: sunny-1651/manual-approval@dev
#     #   with:
#     #     secret: ${{ steps.generate_token.outputs.token }}
#     #     approvers: sunny-1651
#     #     minimum-approvals: 1
#     #   env:
#     #     target-repository: first_go_project
#     #     target-repository-owner: sunny-1651

